#+title: Конфигурация GNU Emacs
#+author: Клементьев Дмитрий
#+email: klementievd08@yandex.ru

Главные цели данной конфигурации:
- Удобная навигация по =Emacs.org=
- Относительно быстрое время запуска (даже при использовании =org-babel=)
- Простая кодовая база (понятная и читаемая)
- Лишь несколько основных пакетов загружаются на старте (ленивая загрузка)
- Отсутствие =use-package= макроса
- Почти идеальная поддержка терминала (=emacs -nw=)

Прочие файлы:
- [[file:early-init.el][Файл ранней инициализации]] - Большая часть оптимизаций
- [[file:init.el][Файл инициализации]] - Загружает org файл

Флаг в начале файла для байт-компиляции.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t; -*-
#+end_src

* Макросы, функции и прочие хелпер фиговины для моего конфига

Некоторые вещи для данной конфигурации приходится изобретать с полного нуля

** Макросы упрощающие ленивую загрузку

Это небольшой набор моих собственных макросов для ленивой загрузки (на подобии Neovim).

Вся суть в том, что я не использую =use-package= (он мне не нравится), вместо этого я использую
другой встроенный в Emacs функционал:
- =autoload=
- =with-eval-after-load=
- =eval-when-compile=

А так же набор своих макросов.

*** =require-on!= - Загрузка пакета при первом использовании хука

#+begin_src emacs-lisp
  (defmacro require-on! (package symbol)
    "Load PACKAGE when SYMBOL is reached."
    (declare (indent defun))
    (let* ((hook (intern (concat (prin1-to-string symbol) "-hook")))
           (fnname (intern (concat "load-" (prin1-to-string package)
                                   "-on-" (prin1-to-string hook)))))
      `(progn
         ,(unless (fboundp fnname)
            `(defun ,fnname (&rest _)
               (require ',package)
               (remove-hook ',hook #',fnname)))
         (add-hook ',hook #',fnname))))
#+end_src

*** =eval-on-cmd!= - Запуск S-expression перед использованием команды

#+begin_src emacs-lisp
  (defvar last-eval-on-cmd-id "a")

  (defmacro eval-on-cmd! (cmd &rest body)
    "Eval BODY before CMD."
    (declare (indent defun))
    (let* ((fnid (intern last-eval-on-cmd-id))
           (fnname (intern (concat (prin1-to-string cmd) "@" (prin1-to-string fnid)))))
      (setq last-eval-on-cmd-id (concat last-eval-on-cmd-id "a"))
      `(define-advice ,cmd
           (:before (&rest _) ,fnid)
         (advice-remove ',cmd #',fnname)
         ,@body)))
#+end_src

* Базовая настройка GNU Emacs

В этой части я настраиваю базовый GNU Emacs.

#+begin_src emacs-lisp
  (defun load-my-custom-file ()
    (load custom-file :no-error :no-message :no-suffix :must-suffix))

  (with-eval-after-load 'emacs
    (add-hook 'after-init-hook #'load-my-custom-file)

    (setq-default frame-title-format "GNU Emacs"
                  make-backup-files nil
                  custom-file (expand-file-name "custom.el"
                                                user-emacs-directory)
                  cursor-type '(bar . 2)
                  cursor-in-non-selected-windows nil
                  default-input-method "russian-computer"
                  indent-tabs-mode nil
                  tab-width 4)

    (global-visual-line-mode 1))
#+end_src

** Встроенные модули

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'which-key)
    (require 'recentf)
    (require 'fringe))

  (with-eval-after-load 'jsonrpc
    (fset #'jsonrpc--log-event #'ignore))

  (with-eval-after-load 'recentf
    (add-hook 'emacs-startup-hook 'recentf-mode))

  (with-eval-after-load 'which-key
    (add-hook 'emacs-startup-hook 'which-key-mode))

  (with-eval-after-load 'fringe
    (fringe-mode '(4 . 4)))
#+end_src

* Внешний вид

Здесь мы настраиваем основную часть внешнего вида GNU Emacs.

| *Основная тема*    | Doom One     |
| *Строка состояния* | Awesome Tray |

** Основная тема (doom themes)

#+begin_src emacs-lisp
  (elpaca 'doom-themes
    (require-on! doom-themes
      emacs-startup))

  (with-eval-after-load 'doom-themes
    (load-theme 'doom-one :no-confirm))
#+end_src

** Строка состояния

#+begin_src emacs-lisp :no-export
  (setq-default awesome-tray-hide-mode-line t)
  (elpaca '(awesome-tray
            :host github
            :repo "manateelazycat/awesome-tray")
    (autoload 'awesome-tray-mode "awesome-tray")
    (add-hook 'emacs-startup-hook 'awesome-tray-mode 103))
#+end_src

** Начальный экран

В качестве начального экрана есть два пакета:
- =dashboard= - Максимально простой и готов к использованию
- =enlight= + =grid= - Очень глубокая кастомизация (сложен в настройке)

Пока что я выберу Dashboard, и не буду париться о том, что и как нужно
делать.

#+begin_src emacs-lisp
  (setq-default dashboard-center-content t
                dashboard-vertically-center-content t
                dashboard-items '((recents . 10)
                                  (bookmarks . 3)
                                  (projects . 3)
                                  (agenda . 5)
                                  ;; (registers . 5)
                                  ))
  (elpaca 'dashboard
    (autoload 'dashboard-setup-startup-hook "dashboard")
    (dashboard-setup-startup-hook))
#+end_src

* Vertico + Marginalia + Orderless

#+begin_src emacs-lisp
  (elpaca 'vertico
    (require-on! vertico
      pre-command))

  (elpaca 'marginalia
    (with-eval-after-load 'vertico
      (require 'marginalia)))

  (with-eval-after-load 'marginalia
    (marginalia-mode 1))

  (with-eval-after-load 'vertico
    (vertico-mode 1))

  (elpaca 'orderless
    (require-on! orderless
      pre-command))

  (with-eval-after-load 'orderless
    (setq completion-styles '(orderless basic)))
#+end_src

* Consult

#+begin_src emacs-lisp
  (elpaca 'consult
    (eval-when-compile
      (require 'consult)))

  (with-eval-after-load 'consult
    (bind-keys ("s-B" . consult-buffer)
               ([remap switch-to-buffer] . consult-buffer)
               ("C-s" . consult-line)
               ("M-g g" . consult-goto-line)))
#+end_src

* Навигация

Данный заголовок включает в себя конфигурацию которая относится к навигации между окнами, в тексте, и.т.д

** Навигация в тексте

Для навигации в тексте есть множество плагинов:
- =avy= - Основной плагин (и пока что единственный используемый в конфиге)
- =ace-link= - Как =ace-window= или =avy=, но для ссылок

Конфигурация =avy=.

TODO: Стоит посмотреть ещё комманды которые предоставляет =avy=. (Это слишком мощная штука)

#+begin_src emacs-lisp
  (elpaca 'avy
    (autoload 'avy-goto-char-2 "avy")
    (bind-key* "C-'" 'avy-goto-char-2))
#+end_src

** Навигация между окнами

Идеальную навигацию между окнами обеспечивают два плагина:
- =golden-ratio= - Автоматически изменяет размер окна
- =ace-window= - Удобное перемещение между окнами одной клавишей (=M-o=)

#+begin_src emacs-lisp
  (elpaca 'ace-window
    (autoload 'ace-window "ace-window")
    (bind-key "M-o" 'ace-window))
#+end_src

=golden-ratio= будет подгружаться при разделении окна (горизонтально или вертикально).

После чего мы добавляем функцию которая будет запускаться после =ace-window=, и будет
устанавливать размер окна в соответствии с =golden-ratio=. Это нужно лишь потому, что
=golden-ratio= почему то не работает с =ace-window= по дефолту.

#+begin_src emacs-lisp
  (elpaca 'golden-ratio
    (eval-on-cmd! split-window-below
      (require 'golden-ratio))
    (eval-on-cmd! split-window-right
      (require 'golden-ratio)))

  (with-eval-after-load 'golden-ratio
    (golden-ratio-mode 1)
    (with-eval-after-load 'ace-window
      (define-advice ace-window
          (:after (&rest _) golden-ratio)
        (golden-ratio))))
#+end_src

* Org Mode

Настраиваем =org-indent-mode= и базовую навигацию по заголовкам при помощи =consult=

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)

  (with-eval-after-load 'org
    (with-eval-after-load 'consult
      (bind-key "C-s" 'consult-outline org-mode-map)))
#+end_src

** Agenda

#+begin_src emacs-lisp
  (bind-key "a" 'org-agenda mode-specific-map)
#+end_src

* Системы контроля версий (Git интеграция)

Git интеграция сводится в основном к двум плагинам: =magit= и =forge=.

=magit= - Незаменимый и безальтернативный Git интерфейс. Более мощного гит интерфейса вы просто не найдёте.

=forge= - Клиент для Github, Gitlab и других хостингов прямо в GNU Emacs.

Пока что я не устанавливаю Forge в своей конфигурации (он мне попросту не нужен, а так же я пишу её не
на своём устройстве). Зато мы сделаем конфиг для Git файлов (gitattributes, gitignore, gitsubmodules)
и настроим Magit, который будет показывать для нас TODOs (плагин =magit-todos=)

#+begin_src emacs-lisp
  (elpaca '(transient
            :host github
            :repo "magit/transient"
            :tag "v0.9.3"))

  (elpaca magit
    (autoload 'magit "magit")
    (bind-key "C-x g" 'magit))
#+end_src

** Magit TODOs

Плагин который отлично выводит все *TODO* ключевые слова.

#+begin_src emacs-lisp
  (elpaca 'magit-todos
    (autoload 'magit-todos-mode "magit-todos")
    (add-hook 'magit-mode-hook 'magit-todos-mode))
#+end_src

** Git файлы и режимы для них

#+begin_src emacs-lisp
  (elpaca 'git-modes
    (autoload 'gitignore-mode "git-modes")
    (autoload 'gitconfig-mode "git-modes")
    (autoload 'gitattributes-mode "git-modes")
    (setq auto-mode-alist
          (append
           '((".gitignore\\'" . gitignore-mode)
             (".gitconfig\\'" . gitconfig-mode)
             (".gitattributes\\'" . gitattributes-mode))
           auto-mode-alist)))
#+end_src
