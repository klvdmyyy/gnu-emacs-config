#+title: Конфигурация GNU Emacs
#+author: Клементьев Дмитрий
#+email: klementievd08@yandex.ru

Главные цели данной конфигурации:
- Удобная навигация по =Emacs.org=
- Относительно быстрое время запуска (даже при использовании =org-babel=)
- Простая кодовая база (понятная и читаемая)
- Лишь несколько основных пакетов загружаются на старте (ленивая загрузка)
- Отсутствие =use-package= макроса
- Почти идеальная поддержка терминала (=emacs -nw=)

Прочие файлы:
- [[file:early-init.el][Файл ранней инициализации]] - Большая часть оптимизаций
- [[file:init.el][Файл инициализации]] - Загружает org файл

Флаг в начале файла для байт-компиляции.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t; -*-
#+end_src

* Макросы, функции и прочие хелпер фиговины для моего конфига

Некоторые вещи для данной конфигурации приходится изобретать с полного нуля

** Макросы упрощающие ленивую загрузку

Это небольшой набор моих собственных макросов для ленивой загрузки (на подобии Neovim).

Вся суть в том, что я не использую =use-package= (он мне не нравится), вместо этого я использую
другой встроенный в Emacs функционал:
- =autoload=
- =with-eval-after-load=
- =eval-when-compile=

А так же набор своих макросов.

*** =require-on!= - Загрузка пакета на хуке/комманде

#+begin_src emacs-lisp
  (defun require-on-hook (hook package)
    (let ((fnname (intern (concat "load-" (prin1-to-string package)
                                  "-on-" (prin1-to-string hook)))))
      `(when (boundp ',hook)
         ,(unless (fboundp fnname)
            `(defun ,fnname (&rest _)
               (require ',package)
               (remove-hook ',hook #',fnname)))
         (add-hook ',hook #',fnname))))

  (defun require-on-command (command package)
    (let ((fnname (intern (concat "load-" (prin1-to-string package)))))
      `(when (fboundp ',command)
         (define-advice ,command
             (:before (&rest _) ,fnname)
           (advice-remove ',command #',(intern (concat (prin1-to-string command)
                                                       "@" (prin1-to-string fnname))))
           (require ',package)))))

  (defmacro require-on! (symbol package)
    "Load PACKAGE on SYMBOL."
    (declare (indent defun))
    (cond
     ((commandp symbol)
      (require-on-command symbol package))
     ((boundp symbol)
      (require-on-hook symbol package))
     (t (error "Can't determine symbol for require-on!: %s" symbol))))
#+end_src

* Базовая настройка GNU Emacs

В этой части я настраиваю базовый GNU Emacs.

#+begin_src emacs-lisp
  (defun load-my-custom-file ()
    (load custom-file :no-error :no-message :no-suffix :must-suffix))

  (with-eval-after-load 'emacs
    (add-hook 'after-init-hook #'load-my-custom-file)

    (setq-default frame-title-format "GNU Emacs"
                  make-backup-files nil
                  custom-file (expand-file-name "custom.el"
                                                user-emacs-directory)
                  cursor-type '(bar . 2)
                  cursor-in-non-selected-windows nil
                  default-input-method "russian-computer"
                  indent-tabs-mode nil
                  tab-width 4)

    (global-visual-line-mode 1))
#+end_src

** Встроенные модули

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'which-key)
    (require 'recentf)
    (require 'fringe))

  (with-eval-after-load 'jsonrpc
    (fset #'jsonrpc--log-event #'ignore))

  (with-eval-after-load 'recentf
    (add-hook 'emacs-startup-hook 'recentf-mode))

  (with-eval-after-load 'which-key
    (add-hook 'emacs-startup-hook 'which-key-mode))

  (with-eval-after-load 'fringe
    (fringe-mode '(8 . 8)))
#+end_src

* Внешний вид

Здесь мы настраиваем основную часть внешнего вида GNU Emacs.

| *Основная тема*    | Doom One     |
| *Строка состояния* | Awesome Tray |

** Основная тема (doom themes)

#+begin_src emacs-lisp
  (elpaca 'doom-themes
    (autoload 'doom-one "doom-themes")
    (add-hook 'emacs-startup-hook
              (lambda ()
                (load-theme 'doom-one :no-confirm)))
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (load-theme 'doom-one :no-confirm)))))
#+end_src

** Строка состояния

#+begin_src emacs-lisp :no-export
  (setq-default awesome-tray-hide-mode-line t
                awesome-tray-update-interval 0.2)

  (elpaca '(awesome-tray
            :host github
            :repo "manateelazycat/awesome-tray")
    (autoload 'awesome-tray-mode "awesome-tray")
    (when (not (daemonp))
      (add-hook 'emacs-startup-hook 'awesome-tray-mode 103))
    (when (daemonp)
      (add-hook 'after-make-frame-functions 'awesome-tray-mode 103)))

  (defun org-timer-module ()
    (if org-timer-active
        (org-timer-value-string)
      nil))

  (defface org-timer-module-face
    '((t (:bold t)))
    "Org Timer module face."
    :group 'awesome-tray)

  (with-eval-after-load 'awesome-tray
    (add-to-list 'awesome-tray-module-alist
                 '("org-timer" . (org-timer-module org-timer-module-face)))
    (add-to-list 'awesome-tray-active-modules "org-timer"))
#+end_src

** Начальный экран

В качестве начального экрана есть два пакета:
- =dashboard= - Максимально простой и готов к использованию
- =enlight= + =grid= - Очень глубокая кастомизация (сложен в настройке)

Пока что я выберу Dashboard, и не буду париться о том, что и как нужно
делать.

#+begin_src emacs-lisp
  (setq-default dashboard-center-content t
                dashboard-vertically-center-content t
                dashboard-items '((recents . 10)
                                  (bookmarks . 3)
                                  (projects . 3)
                                  (agenda . 5)))
  (elpaca 'dashboard
    (autoload 'dashboard-setup-startup-hook "dashboard")
    (dashboard-setup-startup-hook))

  (with-eval-after-load 'dashboard
    ;; Open dashboard when using "emacsclient -c" (daemon only)
    (when (daemonp)
      (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))))
#+end_src

* Vertico + Marginalia + Orderless

#+begin_src emacs-lisp
  (elpaca 'vertico
    (require-on! pre-command-hook
      vertico))

  (elpaca 'marginalia
    (with-eval-after-load 'vertico
      (require 'marginalia)))

  (with-eval-after-load 'marginalia
    (marginalia-mode 1))

  (with-eval-after-load 'vertico
    (vertico-mode 1))

  (elpaca 'orderless
    (require-on! self-insert-command
      orderless))

  (with-eval-after-load 'orderless
    (setq completion-styles '(orderless basic)))
#+end_src

* Consult

#+begin_src emacs-lisp
  (elpaca 'consult
    (eval-when-compile
      (require 'consult)))

  (with-eval-after-load 'consult
    (bind-keys ("s-B" . consult-buffer)
               ([remap switch-to-buffer] . consult-buffer)
               ("C-s" . consult-line)
               ("M-g g" . consult-goto-line)))
#+end_src

* Corfu

#+begin_src emacs-lisp
  (elpaca 'corfu
    (require-on! self-insert-command
      corfu))

  (with-eval-after-load 'corfu
    (setq corfu-cycle t)
    (setq tab-always-indent 'complete)
    (global-corfu-mode 1)

    (require 'corfu-popupinfo)
    (corfu-popupinfo-mode 1)

    (bind-keys* :map corfu-map
                ("TAB" . corfu-complete)
                ("M-d" . corfu-popupinfo-toggle)
                :map corfu-popupinfo-map
                ("M-n" . corfu-popupinfo-scroll-up)
                ("M-p" . corfu-popupinfo-scroll-down)))
#+end_src

* Навигация

Данный заголовок включает в себя конфигурацию которая относится к навигации между окнами, в тексте, и.т.д

** Навигация в тексте

Для навигации в тексте есть множество плагинов:
- =avy= - Основной плагин (и пока что единственный используемый в конфиге)
- =ace-link= - Как =ace-window= или =avy=, но для ссылок
- и.т.д - TODO: Пакетов еще много, их стоит разобрать

Конфигурация =avy=.

TODO: Стоит посмотреть ещё комманды которые предоставляет =avy=. (Это слишком мощная штука)

#+begin_src emacs-lisp
  (elpaca 'avy
    (autoload 'avy-goto-char-2 "avy")
    (bind-key* "C-'" 'avy-goto-char-2))
#+end_src

** Навигация между окнами

Идеальную навигацию между окнами обеспечивают два плагина:
- =golden-ratio= - Автоматически изменяет размер окна
- =ace-window= - Удобное перемещение между окнами одной клавишей (=M-o=)

#+begin_src emacs-lisp
  (elpaca 'ace-window
    (autoload 'ace-window "ace-window")
    (bind-key "M-o" 'ace-window))
#+end_src

=golden-ratio= будет подгружаться при разделении окна (горизонтально или вертикально).

После чего мы добавляем функцию которая будет запускаться после =ace-window=, и будет
устанавливать размер окна в соответствии с =golden-ratio=. Это нужно лишь потому, что
=golden-ratio= почему то не работает с =ace-window= по дефолту.

#+begin_src emacs-lisp
  (elpaca 'golden-ratio
    (require-on! split-window-below
      golden-ratio)
    (require-on! split-window-right
      golden-ratio))

  (with-eval-after-load 'golden-ratio
    (golden-ratio-mode 1)
    (with-eval-after-load 'ace-window
      (define-advice ace-window
          (:after (&rest _) golden-ratio)
        (golden-ratio))))
#+end_src

** Навигация между группами буфферов/окон

Подобную навигацию может обеспечить встроенный в GNU Emacs =tab-bar-mode=.

В некоторых случаях это незаменимая вещь, ведь каждая вкладка содержит свой набор окон.

#+begin_src emacs-lisp
  (eval-when-compile
    (require 'tab-bar))

  (with-eval-after-load 'tab-bar
    (tab-bar-mode 1))
#+end_src

* Org Mode

*Org* - основная часть GNU Emacs. Данный пакет - причина по которой я не могу уйти от GNU Emacs.

** Базовая и обязательная настройка

- Табуляция заголовков (=org-indent-mode=)
- Навигация при помощи =consult-org-heading=

#+begin_src emacs-lisp
  (setq-default org-directory "~/org"
                org-id-locations-file (expand-file-name "cache/.org-id-locations" org-directory))

  (add-hook 'org-mode-hook 'org-indent-mode)

  (bind-keys* :map mode-specific-map
              ("o t s" . org-timer-start)
              ("o t e" . org-timer-stop)
              ("o t p" . org-timer-pause-or-continue)
              ("o t t" . org-timer-set-timer)
              ("o c"   . org-capture))

  (with-eval-after-load 'org
    (with-eval-after-load 'consult
      (bind-keys :map org-mode-map
                 ("C-s" . consult-org-heading)
                 ("C-S-s" . consult-line))))
#+end_src

** Настройка таймера (Org Timer)

TODO: Использование =org-pomodoro=

#+begin_src emacs-lisp
  (defvar org-timer-active nil
    "Non-nil if org-timer is activated")

  (defun org-timer-activate ()
    "Set `org-timer-active' to t"
    (setq org-timer-active t))

  (defun org-timer-deactivate ()
    "Set `org-timer-active' to nil"
    (setq org-timer-active nil))

  (add-hook 'org-timer-start-hook 'org-timer-activate)
  (add-hook 'org-timer-stop-hook  'org-timer-deactivate)
  (add-hook 'org-timer-set-hook   'org-timer-activate)
  (add-hook 'org-timer-done-hook  'org-timer-deactivate)
#+end_src

** Agenda

TODO: Использовать =org-super-agenda=

*** Кастомные комманды, виды (Custom commands, views)

**** Learning (Обучение)

Отдельный вид агенды для отслеживания и планирования задач, целей по изучению алгоритмов
и структур данных

#+begin_src emacs-lisp :tangle no :noweb-ref custom-agenda-views
  ("l" "Learning Agenda"
   ((agenda "" ((org-agenda-span 'day)
                (org-agenda-remove-tags t)
                (org-deadline-warning-days 7)
                ;; TODO: Filter by @yandexlearning tag instead of file
                (org-agenda-files '("~/org/agenda/YandexLearning.org"))))
    (tags-todo "+@yandexlearning+PRIORITY=\"A\"+SCHEDULED<=\"<today>\""
               ((org-agenda-span 'day)
                (org-agenda-remove-tags t)
                (org-agenda-overriding-header "High Priority Tasks")))
    (tags-todo "+@yandexlearning/TODO"
               ((org-agenda-tags-todo-honor-ignore-options t)
                (org-agenda-todo-ignore-scheduled t)
                (org-agenda-remove-tags t)
                (org-agenda-overriding-header "Just TODO Tasks")))))
#+end_src

**** Weekly Review (Недельный обзор)

Недельный обзор завершённых и оставшихся запланированных задач.

Неплохо посмотреть в конце недели как много ты проеб**нил :)

#+begin_src emacs-lisp :tangle no :noweb-ref custom-agenda-views
  ("w" "Weekly Review"
   ((agenda "" ((org-agenda-overriding-header "Completed Tasks")
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'done))
                (org-agenda-span 'week)))
    (agenda "" ((org-agenda-overriding-header "Unfinished Scheduled Tasks")
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-span 'week)))))
#+end_src

*** Конфигурация

#+begin_src emacs-lisp :noweb yes :noweb-prefix no
  (setq-default org-agenda-custom-commands '(<<custom-agenda-views>>))
#+end_src

#+begin_src emacs-lisp
  (setq-default org-agenda-start-with-log-mode t
                org-log-done 'time
                org-log-into-drawer t)

  (define-advice org-agenda
      (:before (&rest _) update-files)
    (setq org-agenda-files
          (directory-files-recursively
           (expand-file-name "agenda" org-directory)
           "\\`[A-Za-z]*.org\\'")))

  (bind-key "a" 'org-agenda mode-specific-map)
#+end_src

** Roam

Roam - Идеальная система заметок на базе Org Mode ([[https://ru.wikipedia.org/wiki/%D0%A6%D0%B5%D1%82%D1%82%D0%B5%D0%BB%D1%8C%D0%BA%D0%B0%D1%81%D1%82%D0%B5%D0%BD][Zettelkasten]])

*** Шаблоны (Captures)

**** Daily: Default

#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-daily-captures
  ("d" "default" entry
   "* %?"
   :target (file+head "%<%Y-%m-%d>.org"
                      "#+title: %<%Y-%m-%d>.org
  ,#+author: Klementiev Dmitry
  ,#+email: klementievd08@yandex.ru
  ,#+date: %<%Y-%m-%d>
  ,#+filetags: :dailies:%<%Y-%m-%d>:daily:"))
#+end_src

**** Programming

#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-captures
  ("p" "Programming" plain
   "%?"
   :target (file+head "programming/${slug}.org"
                      "#+title: ${title}
  ,#+author: Klementiev Dmitry
  ,#+email: klementievd08@yandex.ru
  ,#+date: %<%Y-%m-%d>
  ,#+filetags: :programming:")
   :unarrowed t)
#+end_src

**** Programming: Algorithms

#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-captures
  ("a" "Algorithms" plain
   "%?"
   :target (file+head "programming/algorithms/${slug}.org"
                      "#+title: ${title}
  ,#+author: Klementiev Dmitry
  ,#+email: klementievd08@yandex.ru
  ,#+date: %<%Y-%m-%d>
  ,#+filetags: :algorithms:programming:")
   :unarrowed t)
#+end_src

**** Programming: Data Structures

#+begin_src emacs-lisp :tangle no :noweb-ref org-roam-captures
  ("d" "Data Structures" plain
   "%?"
   :target (file+head "programming/data_structures/${slug}.org"
                      "#+title: ${title}
  ,#+author: Klementiev Dmitry
  ,#+email: klementievd08@yandex.ru
  ,#+date: %<%Y-%m-%d>
  ,#+filetags: :data_structures:programming:")
   :unarrowed t)
#+end_src

*** Configuration

#+begin_src emacs-lisp :noweb yes :noweb-prefix no
  (setq org-roam-v2-ack t)
  
  (setq-default org-roam-directory (expand-file-name "roam/" org-directory)
                org-roam-db-location (expand-file-name "cache/org-roam.db" org-directory)
                org-roam-dailies-capture-templates '(<<org-roam-daily-captures>>)
                org-roam-capture-templates '(<<org-roam-captures>>))

  (elpaca 'org-roam
    (autoload 'org-roam-db-sync "org-roam")
    (add-hook 'emacs-startup-hook
              (lambda ()
                (run-with-timer 1 nil 'org-roam-db-sync))))

  (with-eval-after-load 'org-roam
    (org-roam-db-autosync-mode 1)

    (setq org-roam-db-update-on-save t
          org-roam-dailies-directory "daily/"
          org-roam-node-display-template
          (concat "${title:*} "
                  (propertize "${tags:30}" 'face 'org-tag)))

    (bind-keys :map org-mode-map
               ("C-c r r" . org-roam-ref-add)
               ("C-c r R" . org-roam-ref-remove)
               ("C-c r f" . org-roam-ref-find)
               ("C-c r t" . org-roam-tag-add)
               ("C-c r T" . org-roam-tag-remove)
               ("C-c r a" . org-roam-alias-add)
               ("C-c r A" . org-roam-alias-remove)
               ;; NOTE: See https://git.sr.ht/~abcdw/rde/tree/master/item/src/rde/features/emacs-xyz.scm#L4883
               ;; ("C-c r O" . rde-org-roam-open-ref)
               :map mode-specific-map
               ("n t" . org-roam-dailies-capture-today)
               ("n n" . org-roam-buffer-toggle)
               ("n f" . org-roam-node-find)
               ("n i" . org-roam-node-insert)
               ("n r" . org-roam-ref-find)
               ("n C" . org-roam-capture)))
#+end_src

*** Roam UI

Отличный плагин для просмотра всех заметок и связей между ними.

Красивый веб-фронтенд для заметок Roam.

#+begin_src emacs-lisp
  (elpaca 'org-roam-ui
    ;; Just autoload command for Org Roam UI
    (autoload 'org-roam-ui-mode "org-roam-ui"
      "Web Frontend for Org Roam notes."
      t))
#+end_src

* Системы контроля версий (Git интеграция)

Git интеграция сводится в основном к двум плагинам: =magit= и =forge=.

=magit= - Незаменимый и безальтернативный Git интерфейс. Более мощного гит интерфейса вы просто не найдёте.

=forge= - Клиент для Github, Gitlab и других хостингов прямо в GNU Emacs.

Пока что я не устанавливаю Forge в своей конфигурации (он мне попросту не нужен, а так же я пишу её не
на своём устройстве). Зато мы сделаем конфиг для Git файлов (gitattributes, gitignore, gitsubmodules)
и настроим Magit, который будет показывать для нас TODOs (плагин =magit-todos=)

#+begin_src emacs-lisp
  (elpaca '(transient
            :host github
            :repo "magit/transient"
            :tag "v0.9.3"))

  (elpaca magit
    (autoload 'magit "magit")
    (bind-key "C-x g" 'magit))
#+end_src

** Magit TODOs

Плагин который отлично выводит все *TODO* ключевые слова.

#+begin_src emacs-lisp
  (elpaca 'magit-todos
    (autoload 'magit-todos-mode "magit-todos")
    (add-hook 'magit-mode-hook 'magit-todos-mode))
#+end_src

** Git файлы и режимы для них

#+begin_src emacs-lisp
  (elpaca 'git-modes
    (autoload 'gitignore-mode "git-modes")
    (autoload 'gitconfig-mode "git-modes")
    (autoload 'gitattributes-mode "git-modes")
    (setq auto-mode-alist
          (append
           '((".gitignore\\'" . gitignore-mode)
             (".gitconfig\\'" . gitconfig-mode)
             (".gitattributes\\'" . gitattributes-mode))
           auto-mode-alist)))
#+end_src

** Git Gutter

#+begin_src emacs-lisp
  (elpaca 'git-gutter
    (autoload 'git-gutter-mode "git-gutter")
    (add-hook 'prog-mode-hook 'git-gutter-mode)
    (add-hook 'text-mode-hook 'git-gutter-mode))
#+end_src

* Эмуляция терминала (Terminal emulation)

Для эмуляции терминала я использую два пакета:
- =eshell= + =eat= - основной эмулятор терминала, который закрывает 90% задач (с режимами от =eat=)
- =eat= - эмулятор терминала закрывающий остальные 10%

** Eshell

#+begin_src emacs-lisp
  (define-minor-mode eshell-mode-setup
  "Set up environment on `eshell-mode' invocation."
  :group 'eshell
  (if eshell-mode-setup
      (progn
        ;; FIXME: eshell throw error at `completion-at-point' with `all-the-icons-completion-mode' enabled.
        ;; This is just a temporary fix which disable it.
        (when (boundp 'all-the-icons-completion-mode)
          (all-the-icons-completion-mode 0))
        (if (and (boundp 'envrc-global-mode) envrc-global-mode)
            (add-hook 'envrc-mode-hook (lambda () (setenv "PAGER" "")))
          (setenv "PAGER" ""))
        (eshell/alias "l" "ls -al $1")
        (eshell/alias "e" "find-file $1")
        (eshell/alias "ee" "find-file-other-window $1")
        (eshell/alias "d" "dired $1")
        (eshell/alias "gd" "magit-diff-unstaged")
        ;; (local-unset-key 'eshell/clear)
        )
    (when (boundp 'all-the-icons-completion-mode)
      (all-the-icons-completion-mode 1))))
#+end_src

#+begin_src emacs-lisp
  (defun switch-to-prev-buffer-or-eshell (arg)
    (interactive "P")
    (if arg
        (eshell arg)			; or `project-eshell-or-eshell'
      (switch-to-buffer (other-buffer (current-buffer) 1))))

  (defun project-eshell-or-eshell (&optional arg)
    (interactive "P")
    (if (project-current)
        (project-eshell)
      (eshell arg)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'eshell
    (require 'em-alias)
    (require 'em-hist)
    
    (add-hook 'eshell-mode-hook 'eshell-mode-setup)

    (bind-key "s-e" 'switch-to-prev-buffer-or-eshell eshell-mode-map)
    (autoload 'consult-history "consult")
    (bind-key "M-r" 'consult-history eshell-hist-mode-map))

  (bind-key "s-e" 'project-eshell-or-eshell)
#+end_src

** Eat (Emulate A Terminal)

#+begin_src emacs-lisp
  (defun project-eat-or-eat (&optional arg)
    (interactive "P")
    (if (project-current)
        (eat-project arg)
      (eat)))

  (defun switch-to-prev-buffer-or-eat (arg)
    (interactive "P")
    (if arg
        (eat nil arg)
      (switch-to-buffer (other-buffer (current-buffer) 1))))
#+end_src

#+begin_src emacs-lisp
  ;; Priority: nu (nushell) -> zsh -> fish -> bash -> babashka -> sh
  (setq-default eat-shell (or (executable-find "nu")   ; Nushell
                              (executable-find "zsh")  ; ZShell
                              (executable-find "fish") ; Like ZSH but simpler
                              (executable-find "bash") ; Default Bash
                              (executable-find "bb")   ; Clojure REPL (Without JVM)
                              (executable-find "sh"))) ; You don't have Bash !?

  (setq explicit-shell-file-name eat-shell)

  (setq-default eat-line-input-ring-size 1024
                eat-kill-buffer-on-exit t
                eat-term-scrollback-size nil
                eat-enable-mouse t)

  (elpaca 'eat
    (autoload 'eat "eat")
    (autoload 'eat-eshell-mode "eat")
    (autoload 'eat-eshell-visual-command-mode "eat")
    (bind-key "s-E" 'project-eat-or-eat)
    (add-hook 'eshell-load-hook 'eat-eshell-mode)
    (add-hook 'eshell-load-hook 'eat-eshell-visual-command-mode))

  (with-eval-after-load 'eat
    (bind-key "s-E" 'switch-to-prev-buffer-or-eat eat-mode-map))
#+end_src

* Programming

В данном заголовке мы настраиваем всё, что относится к программированию (конкретно к части написания кода).

[[*Languages][Конфигурация режимов для отдельных языков находиться в другом заголовке]]

** Smartparens

Безальтернативный плагин для автоматического закрытия скобочек (и не только).

В целом данный плагин идеален для редактирования Lisp, Scheme и подобных им языков

#+begin_src emacs-lisp
  (defconst default-pairs-list
    '((?\( . ?\))
      (?\[ . ?\])
      (?\{ . ?\}))
    "List of default pairs")

  (defun open-pair-p (char)
    "Return t if CHAR is opening pair"
    (member char (mapcar (lambda (pairs) (car pairs)) default-pairs-list)))

  (defun close-pair-p (char)
    "Return t if CHAR is closing pair"
    (member char (mapcar (lambda (pairs) (cdr pairs)) default-pairs-list)))

  (defun indent-between-pairs ()
    "Open a new brace or bracket expression, with relevant newlines and indent."
    (interactive)
    (if (and (open-pair-p (char-before))
             (close-pair-p (char-after)))
        (progn (newline)
               (newline)
               (indent-according-to-mode)
               (forward-line -1)
               (indent-according-to-mode))
      (newline-and-indent)))

  (bind-key "RET" 'indent-between-pairs prog-mode-map)

  (elpaca 'smartparens
    (autoload 'smartparens-mode "smartparens")
    (autoload 'smartparens-strict-mode "smartparens")
    (add-hook 'prog-mode-hook 'smartparens-mode)
    (dolist (hook '(emacs-lisp-mode-hook
                    lisp-mode-hook
                    common-lisp-mode-hook
                    scheme-mode-hook))
      (add-hook hook 'smartparens-strict-mode)))

  (with-eval-after-load 'smartparens
    (require 'smartparens-config)
    (bind-keys :map smartparens-mode-map
               ("M-s" . nil)
               ("M-DEL" . sp-backward-unwrap-sexp)
               ("C-<left>" . sp-forward-barf-sexp)
               ("C-<right>" . sp-forward-slurp-sexp)))
               
#+end_src

** Tree Sitter

Tree Sitter в GNU Emacs - это головная боль. Местами он слишком сложен в настройке и просто работает каким-то вообще непонятным образом.

Для начала нужно определить простую функцию которая будет устанавливать грамматику для всех определённых языков.

#+begin_src emacs-lisp
  (defun treesit-install-all ()
    "Install all language grammars from `treesit-language-source-alist'
  variable by `treesit-install-language-grammar' function.

  This function install language grammar only when it unavailable."
    (interactive)
    (mapc
     (lambda (lang)
       (when (not (treesit-language-available-p lang))
         (treesit-install-language-grammar lang)))
     (mapcar #'car treesit-language-source-alist)))
#+end_src

Далее определяем языки (и их грамматику), а так же запускаем их установку.

#+begin_src emacs-lisp
  ;; Tree Sitter source
  (setq treesit-language-source-alist
        '((go "https://github.com/tree-sitter/tree-sitter-go")
          (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (bash "https://github.com/tree-sitter/tree-sitter-bash")))

  (run-with-timer 1 nil 'treesit-install-all)
#+end_src

** LeetCode

LeetCode клиент для GNU Emacs.

Данный пакет - возможность удобно практиковать алгоритмы и структуры данных, а так же решать задачи прямо в Emacs.

#+begin_src emacs-lisp
  (setq-default leetcode-directory "~/leetcode")

  (elpaca 'leetcode
    (autoload 'leetcode "leetcode"
      "Run LeetCode client for GNU Emacs."
      t))

  (with-eval-after-load 'leetcode
    (setq leetcode-save-solutions t
          leetcode-prefer-language "golang"
          leetcode-prefer-sql "postgresql"))
#+end_src

* Languages

Конфигурация языков.

** Emacs Lisp

#+begin_src emacs-lisp
  (elpaca 'highlight-defined
    (autoload 'highlight-defined-mode "highlight-defined")
    (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode))
#+end_src

** C language + Tree Sitter

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.\\(c\\|h\\)\\'" . c-ts-mode))

  (defalias 'c-mode 'c-ts-mode
    "C language + Tree-Sitter")
#+end_src

** Go language + Tree Sitter

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))
  (add-to-list 'auto-mode-alist '("go.mod\\'" . go-mod-ts-mode))

  (elpaca 'ob-go
    (require-on! org-mode-hook
      ob-go))

  (defalias 'go-mode 'go-ts-mode
    "Go language + Tree-Sitter")

  (with-eval-after-load 'go-ts-mode
    (setq go-ts-mode-indent-offset 4))
#+end_src
